// public/js/push.js

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// 1) ŸÜŸÇÿ∑ÿ© ÿßŸÑŸÜŸáÿßŸäÿ© ŸÑŸÑŸÄ API
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
const API_BASE = 'https://dwam-app-by-omar.onrender.com/api';

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// 2) ÿ•ÿπÿØÿßÿØÿßÿ™ Firebase (ŸÖÿ∑ÿßÿ®ŸÇÿ© firebase-messaging-sw.js)
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js';
import {
  getMessaging,
  getToken,
  onMessage
} from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-messaging.js';

const firebaseConfig = {
  apiKey:           "AIzaSyClFXniBltSeJrp3sxS3_bAgbrZPo0vP3Y",
  authDomain:       "device-streaming-47cbe934.firebaseapp.com",
  projectId:        "device-streaming-47cbe934",
  storageBucket:    "device-streaming-47cbe934.appspot.com",
  messagingSenderId:"235398312189",
  appId:            "1:235398312189:web:8febe5e63f7b134b808e94"
};
const VAPID_PUBLIC_KEY = "BIvZq29UIB5CgKiIXUOCVVVDX0DtyKuixDyXm6WpCc1f18go2a6oWWw0VrMBYPLSxco2-44GyDVH0U5BHn7ktiQ";

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// 3) ÿØÿßŸÑÿ© ÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± Ÿàÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÑŸàÿ≠ÿ©
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
window.addNotification = ({ title, body, time }) => {
  const saved = JSON.parse(localStorage.getItem('notifications') || '[]');
  saved.unshift({ title, body, time });
  if (saved.length > 50) saved.pop(); // ÿßÿ≠ÿ™ŸÅÿ∏ ÿ®ÿ¢ÿÆÿ± 50 ÿ•ÿ¥ÿπÿßÿ±
  localStorage.setItem('notifications', JSON.stringify(saved));
};

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// 4) ÿ™ŸáŸäÿ¶ÿ© ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑŸàŸäÿ® (FCM)
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
export async function initPush() {
  // 1) ÿ∑ŸÑÿ® ÿ•ÿ∞ŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
  const perm = await Notification.requestPermission();
  if (perm !== 'granted') {
    console.warn('üîï ÿ•ÿ∞ŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿ∫Ÿäÿ± ŸÖŸÖŸÜŸàÿ≠');
    return;
  }

  // 2) ÿ™ŸáŸäÿ¶ÿ© Firebase Messaging
  const app = initializeApp(firebaseConfig);
  const messaging = getMessaging(app);

  // 3) ÿ∑ŸÑÿ® ÿ™ŸàŸÉŸÜ FCM
  let token;
  try {
    token = await getToken(messaging, { vapidKey: VAPID_PUBLIC_KEY });
    console.log('‚úÖ FCM Registration Token obtained:', token);
  } catch (err) {
    console.error('‚ùå Failed to get FCM token:', err);
    return;
  }

  // 4) ÿ™ŸÅÿßÿØŸä ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÖÿ≤ÿØŸàÿ¨
  const last = localStorage.getItem('fcmTokenSent');
  if (last === token) {
    console.log('üî∏ FCM token already sent, skip.');
  } else {
    try {
      // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ™ŸàŸÉŸÜ ÿ•ŸÑŸâ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
      await fetch(`${API_BASE}/register-token`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user: window.currentUser, token })
      });
      console.log('‚úÖ FCM token sent to server');
      localStorage.setItem('fcmTokenSent', token);
    } catch (err) {
      console.error('‚ùå Failed to send FCM token to server:', err);
    }
  }

  // 5) ÿßÿ≥ÿ™ŸÖÿßÿπ ŸÑŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸàÿßÿ±ÿØÿ© ŸÅŸä ÿßŸÑŸàÿßÿ¨Ÿáÿ©
  onMessage(messaging, payload => {
    const { title, body } = payload.notification || {};
    console.log('üì© FCM onMessage:', title, body);
    // ÿπÿ±ÿ∂ ÿ•ÿ¥ÿπÿßÿ± ŸÜÿ∏ÿßŸÖŸä
    new Notification(title, { body });
    // ÿ≠ŸÅÿ∏Ÿá ŸÅŸä ÿßŸÑŸÑŸàÿ≠ÿ©
    window.addNotification({ title, body, time: new Date().toLocaleString() });
  });
}

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// 5) ÿ™ŸáŸäÿ¶ÿ© ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ (Capacitor Native)
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
import { PushNotifications as CN } from '@capacitor/push-notifications';

export async function initPushNative() {
  // ÿ•ÿ∞ÿß ÿ£ŸÜÿ™ ÿ™ÿπŸÖŸÑ ÿπŸÑŸâ ÿßŸÑŸàŸäÿ®ÿå ÿßÿÆÿ±ÿ¨
  if (!CN) return;

  // ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÇŸÜÿßÿ© ÿßŸÑÿ£ŸàŸÑŸâ (ŸäŸèŸÅÿ∂ŸëŸÑ ÿßÿ≥ÿ™ÿØÿπÿßÿ° Ÿáÿ∞ÿß ŸÇÿ®ŸÑ ÿ∑ŸÑÿ® ÿßŸÑÿ£ÿ∞ŸàŸÜÿßÿ™)
  try {
    await CN.createChannel({
      id: 'default',
      name: 'ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©',
      description: 'ÿßŸÑŸÇŸÜÿßÿ© ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ',
      importance: 5,
      vibrationPattern: [100, 200, 100],
      sound: 'default'
    });
    console.log('üîî ŸÇŸÜÿßÿ© default ÿ£ŸÜÿ¥ÿ¶ÿ™ ÿ®ÿµŸàÿ™ ŸàÿßŸáÿ™ÿ≤ÿßÿ≤');
  } catch (e) {
    console.warn('‚ö†Ô∏è ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÇŸÜÿßÿ©:', e);
  }

  // ÿ∑ŸÑÿ® ÿßŸÑÿ£ÿ∞ŸàŸÜÿßÿ™
  const perm = await CN.requestPermissions();
  if (perm.receive !== 'granted') return;

  // ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ¨Ÿáÿßÿ≤
  await CN.register();

  // ŸÖÿ≥ÿ™ŸÖÿπ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ™ŸàŸÉŸÜ
  CN.addListener('registration', ({ value: nativeToken }) => {
    console.log('‚úÖ Native token:', nativeToken);
    if (window.currentUser) {
      fetch(`${API_BASE}/register-token`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user: window.currentUser, token: nativeToken })
      }).catch(console.error);
    }
  });

  // ŸÖÿ≥ÿ™ŸÖÿπ ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÅŸä ÿßŸÑŸÄ foreground
  CN.addListener('pushNotificationReceived', notif => {
    console.log('üì© pushReceived (native):', notif);
    new Notification(notif.title, { body: notif.body });
    window.addNotification({
      title: notif.title,
      body: notif.body,
      time: new Date().toLocaleString()
    });
  });

  // ŸÖÿ≥ÿ™ŸÖÿπ ÿπŸÜÿØ ÿßŸÑŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
  CN.addListener('pushNotificationActionPerformed', action => {
    console.log('‚û°Ô∏è Native action:', action);
  });
}
